(set-logic QF_NIA)
(declare-fun M_0 () Int)
(assert (>= M_0 0))
(declare-fun M_1 () Int)
(assert (>= M_1 0))
(declare-fun M_2 () Int)
(assert (>= M_2 0))
(assert (or (> M_0 0) (> M_1 0) (> M_2 0)))
(declare-fun N01 () Int)
(assert (>= N01 0))
(declare-fun N02 () Int)
(assert (>= N02 0))
(declare-fun N10 () Int)
(assert (>= N10 0))
(declare-fun N12 () Int)
(assert (>= N12 0))
(declare-fun N20 () Int)
(assert (>= N20 0))
(declare-fun N21 () Int)
(assert (>= N21 0))

(assert (= (+ (* 1 M_0) (* 0 M_1) (* 1 M_2)) (+ (* 1 M_0) (* 1 M_1) (* 0 M_2))))
(assert (= (+ (* 0 M_0) (* 2 M_1) (* 1 M_2)) (+ (* 1 M_0) (* 1 M_1) (* 1 M_2))))
(assert (<= N01 M_0))
(assert (<= N01 M_1))
(assert (<= N02 M_0))
(assert (<= N02 M_2))
(assert (<= N10 M_1))
(assert (<= N10 M_0))
(assert (<= N12 M_1))
(assert (<= N12 M_2))
(assert (<= N20 M_2))
(assert (<= N20 M_0))
(assert (<= N21 M_2))
(assert (<= N21 M_1))
(assert (or (and (and (= (+ N10 N20) (- M_0 1)) (= (+ N01 N21) M_1) (= (+ N02 N12) M_2)) (and (= (+ N20 N21) (- M_2 1)) (= (+ N01 N02) M_0) (= (+ N10 N12) M_1)) (= N02 0)) (and (and (= (+ N01 N21) (- M_1 1)) (= (+ N10 N20) M_0) (= (+ N02 N12) M_2)) (and (= (+ N20 N21) (- M_2 1)) (= (+ N01 N02) M_0) (= (+ N10 N12) M_1)))))

(check-sat)
(get-model)
(exit)